# Bot
from bot import *

# Telegram API
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import MessageHandler, CommandHandler, Filters, CallbackContext, ConversationHandler, \
    CallbackQueryHandler

# DB API
from db.engine import db_session
from db.models.Group import Group
from db.models.GroupMember import GroupMember
from db.models.GroupToken import GroupToken
from db.models.User import User

# Misc.
from enum import Enum


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –±–æ—Ç–∞
class MG(Enum):
    CHOICE = range(1)


def cmd_join(upd: Update, ctx: CallbackContext):
    split = upd.message.text.split(' ')
    if len(split) != 2:
        ctx.bot.send_message(
            chat_id=upd.effective_chat.id,
            text='–©–æ–± —Å—Ç–∞—Ç–∏ —á–ª–µ–Ω–æ–º –≥—Ä—É–ø–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ó—ó –∫–æ–¥:\n/join Abc123dEF4')
        return

    with db_session.begin() as s:
        group_token = s.query(GroupToken).filter_by(token=split[1]).one_or_none()
        if group_token is None:
            ctx.bot.send_message(
                chat_id=upd.effective_chat.id,
                text='–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –ø–æ–º–∏–ª–∏–ª–∏—Å—è —É –∫–æ–¥—ñ –∞–±–æ –∞–≤—Ç–æ—Ä –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –π–æ–≥–æ –∑–º—ñ–Ω–∏–≤.')
        else:
            try:
                group_member = GroupMember(upd.effective_user.id, group_token.group_id)
                s.add(group_member)
                s.flush()
            except:
                ctx.bot.send_message(
                    chat_id=upd.effective_chat.id,
                    text=f'–í–∏ –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏ üòâ.')
                return

            ctx.bot.send_message(
                chat_id=upd.effective_chat.id,
                text=f'–¢–µ–ø–µ—Ä –≤–∏ —É—á–∞—Å–Ω–∏–∫ –≥—Ä—É–ø–∏ "{group_token.group.name}".')


def cmd_my_groups(upd: Update, ctx: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton('–ì—Ä—É–ø–∏, —É—á–∞—Å–Ω–∏–∫–æ–º —è–∫–∏—Ö –≤–∏ —î', callback_data=f'member_of'),
        ],
        [
            InlineKeyboardButton('–ì—Ä—É–ø–∏, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –≤–∞–º', callback_data=f'owner_of'),
        ],
    ]
    ctx.bot.send_message(chat_id=upd.effective_chat.id,
                         text=f'–û–±–µ—Ä—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:',
                         reply_markup=InlineKeyboardMarkup(keyboard))
    return MG.CHOICE


def conv_mg_choice(upd: Update, ctx: CallbackContext):
    query = upd.callback_query
    action = query.data
    if action == 'member_of':
        with db_session.begin() as s:
            pass
    elif action == 'owner_of':
        with db_session.begin() as s:
            pass
    query.answer()


def conv_mg_cancel(upd: Update, ctx: CallbackContext):
    return ConversationHandler.END


dispatcher.add_handler(ConversationHandler(
    entry_points=[CommandHandler('my_groups', cmd_my_groups)],
    states={
        MG.CHOICE: [CallbackQueryHandler(conv_mg_choice), ],
    },
    fallbacks=[CommandHandler('cancel', conv_mg_cancel),
               ],
))


dispatcher.add_handler(CommandHandler('join', cmd_join))
