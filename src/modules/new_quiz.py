# Bot
from bot import *

# Telegram API
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ParseMode
from telegram.ext import MessageHandler, CommandHandler, Filters, CallbackContext, ConversationHandler, \
    CallbackQueryHandler

# DB API
from db.engine import session
from sqlalchemy.orm.attributes import flag_modified

# Misc.
from random import choice
from enum import Enum
from utils import generate_token


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –±–æ—Ç–∞
class NQ(Enum):
    NAME = 0
    NEW_CATEGORY = 1
    QUE = 2
    QUE_ANS = 3
    QUE_ANS_RIGHT = 4
    PRIVACY = 5


def cmd_new_quiz(upd: Update, ctx: CallbackContext):
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)

        # –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è?
        user.data['new_quiz'] = {
            'categories': [],
            'questions': [],
        }
        flag_modified(user, 'data')

    ctx.bot.send_message(chat_id=upd.effective_chat.id, text='1. –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –©–æ–± –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ '
                                                             '—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å /cancel.')
    return NQ.NAME


def cmd_remove_quiz(upd: Update, ctx: CallbackContext):
    split = upd.message.text.split(' ')
    if len(split) != 2:
        ctx.bot.send_message(chat_id=upd.effective_chat.id, text='–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ '
                                                                 '–π–æ–≥–æ –∫–æ–¥:\n/pass Abc123dEF4')
        return

    with session.begin() as s:
        quiz_token = s.query(QuizToken).filter_by(token=split[1]).one_or_none()
        if quiz_token is None:
            ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                 text='–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –ø–æ–º–∏–ª–∏–ª–∏—Å—è —É –∫–æ–¥—ñ –∞–±–æ –∞–≤—Ç–æ—Ä –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è '
                                      '–π–æ–≥–æ –∑–º—ñ–Ω–∏–≤.')
            return

        quiz = s.get(Quiz, quiz_token.quiz_id)
        user = s.get(User, upd.effective_user.id)
        if quiz.author_id == user.id:
            s.delete(quiz)
            ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                 text='–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ üò¢.')
        else:
            ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                 text='–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ üòé.')


def conv_nq_name(upd: Update, ctx: CallbackContext):
    name = upd.message.text
    if RE_SHORT_TEXT.fullmatch(name):
        with session.begin() as s:
            user = s.get(User, upd.effective_user.id)
            user.data['new_quiz']['name'] = name
            user.flag_data()
        ctx.bot.send_message(chat_id=upd.effective_chat.id, text=f'–ù–∞–∑–≤–∞ "{upd.message.text}" –ø—Ä–æ—Å—Ç–æ —á—É–¥–æ–≤–∞!')
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text='2. –¢–µ–ø–µ—Ä, –≤–≤–æ–¥—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ü—å–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–æ –æ–¥–Ω—ñ–π. –©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è '
                                  '–∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å /done. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ '
                                  '–¥–æ–¥–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /show.')
    else:
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text='–¶—è –Ω–∞–∑–≤–∞ –Ω–µ –ø–∞—Å—É—î –≤–∞—à–æ–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—é :(\n–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —ñ–Ω—à—É (‚óè\'‚ó°\'‚óè)')
        return NQ.NAME
    return NQ.NEW_CATEGORY


def conv_nq_cat(upd: Update, ctx: CallbackContext):
    cat_name = upd.message.text
    if RE_SHORT_TEXT.fullmatch(cat_name):
        with session.begin() as s:
            user = s.get(User, upd.effective_user.id)
            cat_ref = user.data['new_quiz']['categories']
            cat = s.query(QuizCategoryType).filter_by(name=cat_name).one_or_none()

            if cat is not None and cat.id in cat_ref:
                ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                     text=f'–¶—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∂–µ –¥–æ–¥–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ '
                                          f'–¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /show.')
                return NQ.NEW_CATEGORY
            if len(cat_ref) >= MAX_CATEGORY_NUMBER:
                ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                     text=f'–ù–∞–∂–∞–ª—å, –Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ {MAX_CATEGORY_NUMBER} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –í–∏ –º–æ–∂–µ—Ç–µ '
                                          f'–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–¥–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /show')
                return NQ.NEW_CATEGORY

            if cat is None:
                cat = QuizCategoryType(cat_name)
                s.add(cat)
                s.flush()
                ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                     text=f'–í–∏ –ø–µ—Ä—à—ñ –≤–∫–∞–∑–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {cat_name}. –û—Ü–µ —Ç–∞–∫ –≤–∏–Ω–∞—Ö—ñ–¥–ª–∏–≤—ñ—Å—Ç—å!')

            cat_ref.append(cat.id)
            user.flag_data()
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text=f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—é "{upd.message.text}" –¥–æ–¥–∞–Ω–æ. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —â–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ–± –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ '
                                  '–¥–æ–¥–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /done.')
    else:
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text='–¢–∞–∫–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∞, –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É. (‚óè\'‚ó°\'‚óè)')
    return NQ.NEW_CATEGORY


# def conv_nq_cat_rules(upd: Update, ctx: CallbackContext):
#    ctx.bot.send_message(chat_id=upd.effective_chat.id, text='–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–∏–º–≤–æ–ª–∏:\n'
#                                                              '¬´a-z–∞-—è—ë—ó—ñ—î“ë\-_,\.()1-9\'" ¬ª\n'
#                                                              '–¢–∞ –±—É—Ç–∏ –¥–æ–≤–∂–∏–Ω–æ—é —É 3-50 —Å–∏–º–≤–æ–ª—ñ–≤')
#     return NQ.NEW_CATEGORY


def get_cat_markup(user_id, cat_id_to_remove=None):
    keyboard = []
    with session.begin() as s:
        user = s.get(User, user_id)
        cats = user.data['new_quiz']['categories']
        if cat_id_to_remove is not None:
            cats.remove(cat_id_to_remove)
            user.flag_data()
        for x in range(len(cats)):
            cat = s.get(QuizCategoryType, cats[x])
            keyboard.append([InlineKeyboardButton(cat.name, callback_data=str(cat.id))])
        return InlineKeyboardMarkup(keyboard)


def conv_nq_cat_show(upd: Update, ctx: CallbackContext):
    ctx.bot.send_message(chat_id=upd.effective_chat.id, text=f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–∂–º—ñ—Ç—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó):',
                         reply_markup=get_cat_markup(upd.effective_user.id))
    # TODO: –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –¥–æ–ø. –∫–Ω–æ–ø–æ–∫.
    return NQ.NEW_CATEGORY


def rem_cat_callback(upd: Update, ctx: CallbackContext):
    query = upd.callback_query
    query.answer()
    query.edit_message_reply_markup(get_cat_markup(upd.effective_user.id, int(query.data)))


def conv_nq_cat_done(upd: Update, ctx: CallbackContext):
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)
        cats = user.data['new_quiz']['categories']
        res = ''
        for x in range(len(cats)):
            res += f'{x + 1}. {s.get(QuizCategoryType, cats[x]).name}.\n'
    ctx.bot.send_message(chat_id=upd.effective_chat.id,
                         text=f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ–¥–∞–Ω–æ:\n{res}–¢–µ–ø–µ—Ä, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (1<=X<=256 —Å–∏–º–≤–æ–ª—ñ–≤).')
    return NQ.QUE


def conv_nq_que(upd: Update, ctx: CallbackContext):
    if RE_MED_TEXT.fullmatch(upd.message.text):
        with session.begin() as s:
            user = s.get(User, upd.effective_user.id)
            user.data['new_quiz']['questions'].append({
                'question': upd.message.text,
                'right_answers': [],
                'wrong_answers': [],
            })
            user.flag_data()
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text=f'{choice(["–ß—É–¥–æ–≤–µ", "–ì–∞—Ä–Ω–µ", "–ö–ª–∞—Å–Ω–µ"])} –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! –¢–µ–ø–µ—Ä –≤–≤–æ–¥—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ '
                                  '–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –Ø–∫—â–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π - –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å '
                                  '–≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.')
    else:
        ctx.bot.send_message(chat_id=upd.effective_chat.id, text='–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ '
                                                                 '–¥–æ–≤–≥–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏.')
        return NQ.QUE
    return NQ.QUE_ANS_RIGHT


def conv_nq_que_right_ans(upd: Update, ctx: CallbackContext):
    if RE_MED_TEXT.fullmatch(upd.message.text):
        with session.begin() as s:
            user = s.get(User, upd.effective_user.id)
            user.data['new_quiz']['questions'][-1]['right_answers'].append(upd.message.text)
            user.flag_data()
        ctx.bot.send_message(chat_id=upd.effective_chat.id,
                             text=f'{choice(["–°—É–ø–µ—Ä", "–ß—É–¥–æ–≤–æ", "–ë–ª–∏—Å–∫—É—á–µ"])}, –≤—ñ—Ä–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–æ! –í–≤–æ–¥—å—Ç–µ –¥–∞–ª—ñ, '
                                  '–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /done –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–µ–≤—ñ—Ä–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.')
    return NQ.QUE_ANS_RIGHT


def conv_nq_que_right_ans_done(upd: Update, ctx: CallbackContext):
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)
        cur_que_ref = user.data['new_quiz']['questions'][-1]
        if len(cur_que_ref['right_answers']) < 1:
            ctx.bot.send_message(chat_id=upd.effective_chat.id, text="–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±–æ–¥–∞–π –æ–¥–Ω–∞ –≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
            return NQ.QUE_ANS_RIGHT
    ctx.bot.send_message(chat_id=upd.effective_chat.id, text=f'{choice(["–°—É–ø–µ—Ä", "–ß—É–¥–æ–≤–æ", "–ë–ª–∏—Å–∫—É—á–µ"])}, '
                                                             '–≤—Å—ñ –≤—ñ—Ä–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ–¥–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–æ–¥—å—Ç–µ –Ω–µ–≤—ñ—Ä–Ω—ñ.')
    return NQ.QUE_ANS


def conv_nq_que_ans(upd: Update, ctx: CallbackContext):
    if RE_MED_TEXT.fullmatch(upd.message.text):
        with session.begin() as s:
            user = s.get(User, upd.effective_user.id)
            user.data['new_quiz']['questions'][-1]['wrong_answers'].append(upd.message.text)
            user.flag_data()
        ctx.bot.send_message(chat_id=upd.effective_chat.id, text=f"{choice(['–°—É–ø–µ—Ä', '–ß—É–¥–æ–≤–æ', '–ë–ª–∏—Å–∫—É—á–µ'])}, "
                                                                 "–Ω–µ–≤—ñ—Ä–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–¥–∞–Ω–æ! –í–≤–æ–¥—å—Ç–µ –¥–∞–ª—ñ, –∞–±–æ "
                                                                 "–≤–≤–µ–¥—ñ—Ç—å /next –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")
    return NQ.QUE_ANS


def conv_nq_que_done(upd: Update, ctx: CallbackContext):
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)
        cur_que_ref = user.data['new_quiz']['questions'][-1]
        if (len(cur_que_ref['right_answers']) + len(cur_que_ref['right_answers'])) < 2:
            ctx.bot.send_message(chat_id=upd.effective_chat.id,
                                 text='–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –±–æ–¥–∞–π 2 –≤ —Å—É–º—ñ, —Ç–æ–º—É –º–∏ '
                                      '–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ '
                                      '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π - –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /done.')
            return NQ.QUE_ANS_RIGHT
    ctx.bot.send_message(chat_id=upd.effective_chat.id,
                         text=f'–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, '
                              f'–≤–≤—ñ–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /done.')
    return NQ.QUE


def conv_nq_success_end(upd: Update, ctx: CallbackContext):
    ctx.bot.send_message(chat_id=upd.effective_chat.id,
                         text='–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞–¥–µ–Ω–æ. –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:\n'
                              '/private - –ø—Ä–∏–≤–∞—Ç–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º.\n'
                              '/public - –ø—É–±–ª—ñ—á–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –ø–æ—à—É–∫–æ–º —Ç–∞ –º–æ–∂–µ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ —É —Å–ø–∏—Å–∫–∏ '
                              '–Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö —ñ —Ç–æ–º—É –ø–æ–¥—ñ–±–Ω–µ.')
    return NQ.PRIVACY


def conv_nq_privacy(upd: Update, ctx: CallbackContext):
    privacy = upd.message.text[1:] == 'public'
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)

        quiz_ref = user.data['new_quiz']
        cats_ref = quiz_ref['categories']
        que_ref = quiz_ref['questions']

        quiz = Quiz(quiz_ref['name'], user.id, privacy)

        s.add(quiz)
        s.flush()

        for cat in cats_ref:
            kitten = QuizCategory(quiz.id, cat)
            s.add(kitten)

        for que in que_ref:
            question = QuizQuestion(quiz.id, que['question'], len(que['right_answers']) > 1)
            s.add(question)
            s.flush()

            for ans in que['right_answers']:
                answer = QuestionAnswer(question.id, ans, True)
                s.add(answer)
            for ans in que['wrong_answers']:
                answer = QuestionAnswer(question.id, ans, False)
                s.add(answer)
        tok = QuizToken(quiz.id)
        s.add(tok)
        ctx.bot\
            .send_message(
            chat_id=upd.effective_chat.id,
            text=f'–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ\! –ö–æ–¥ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è \- **{tok.token}**\. –ô–æ–≥–æ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –∑–∞'
                 f' {"–Ω–∞–∑–≤–æ—é –∞–±–æ " if quiz.is_public else ""}—Ü–∏–º –∫–æ–¥–æ–º —É –ø–æ—à—É–∫—É \(/search {tok.token}'
                 f'{" –∞–±–æ /search " + quiz.name if quiz.is_public else ""}\) –∞–±–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ '
                 f'/pass {tok.token}\. –¶–µ–π –∫–æ–¥ –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ —É –º–µ–Ω—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\.',
                 parse_mode=ParseMode.MARKDOWN_V2)
        user.clear_data()
    return ConversationHandler.END


def conv_nq_cancel(upd: Update, ctx: CallbackContext):
    """ –í–∏–¥–∞–ª—è—î –≤—Å—ñ –∑–≥–∞–¥–∫–∏ –ø—Ä–æ —Ü–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. """
    with session.begin() as s:
        user = s.get(User, upd.effective_user.id)
        del user.data['new_quiz']
        flag_modified(user, 'data')
    ctx.bot.send_message(chat_id=upd.effective_chat.id, text='–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.')
    return ConversationHandler.END


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.
# TODO: –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫
dispatcher.add_handler(ConversationHandler(
    entry_points=[CommandHandler('new_quiz', cmd_new_quiz)],
    states={
        NQ.NAME: [MessageHandler(Filters.text & ~Filters.command, conv_nq_name), ],
        NQ.NEW_CATEGORY: [MessageHandler(Filters.text & ~Filters.command, conv_nq_cat),
                          CommandHandler('show', conv_nq_cat_show),
                          CallbackQueryHandler(rem_cat_callback),
                          CommandHandler('done', conv_nq_cat_done), ],
        NQ.QUE: [MessageHandler(Filters.text & ~Filters.command, conv_nq_que),
                 CommandHandler('done', conv_nq_success_end), ],
        NQ.QUE_ANS_RIGHT: [MessageHandler(Filters.text & ~Filters.command, conv_nq_que_right_ans),
                           CommandHandler('done', conv_nq_que_right_ans_done), ],
        NQ.QUE_ANS: [MessageHandler(Filters.text & ~Filters.command, conv_nq_que_ans),
                     CommandHandler('next', conv_nq_que_done),
                     CommandHandler('done', conv_nq_success_end),
                     ],
        NQ.PRIVACY: [
            CommandHandler('private', conv_nq_privacy),
            CommandHandler('public', conv_nq_privacy),
        ]
    },
    fallbacks=[CommandHandler('cancel', conv_nq_cancel)]
))

dispatcher.add_handler(CommandHandler('remove_quiz', cmd_remove_quiz))
